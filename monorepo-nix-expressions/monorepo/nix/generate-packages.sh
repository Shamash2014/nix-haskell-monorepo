#! /usr/bin/env nix-shell
#! nix-shell -i bash -p cabal2nix

if [[ $# -ne 1 || $1 == "--help" ]]; then
  {
    echo "Usage: "
    printf "\t%s <PATH_TO_SRC_ROOT>\n" "$0"
    echo ""
    echo "Example: "
    printf "\t%s ../code\n" "$0"
  } >&2
  exit 1
fi

CODE_ROOT="$1"

# this prepends the path in a Nix expression's `src` attribute with a call to `nix-gitignore.gitignoreSourcePure`
# while also adding nix-gitignore as a dependency
function gitignore-src() {
  sed -i '1s/{ /{ nix-gitignore, / ; /^\s*src = / s/src = /src = nix-gitignore.gitignoreSourcePure [ ..\/..\/..\/.gitignore ] /' "$1"
}

echo "Clearing folder $(readlink -f ./packages/)"
{
mkdir ./packages || true
rm ./packages/* || true
} 2>/dev/null

declare -a PKGS

echo "Reading packages in $(readlink -f "$CODE_ROOT")"

# TODO use builtin nix functions to list directory contents instead of generating the attribute sets
echo "# DO NOT MODIFY ! - this file is generated by generate-packages.sh" > packages.nix
echo "{" >> packages.nix

# TODO use cabal.project file instead of recursively searching *.cabal files.
for row in $(grep -R --include '*.cabal' --exclude-dir '.stack-work' '^name:' "$CODE_ROOT" | sed 's/:name:\s*/:/'); do
  cf="$(echo $row | cut -d: -f1)"
  CABAL_FILE_DIR="$(dirname "$cf")"
  PACKAGE_NAME="$(echo $row | cut -d: -f2)"

  printf "Generating Nix expression for package: %s (dir: %s)\n" "$PACKAGE_NAME" "$(readlink -f "$CABAL_FILE_DIR")"
  (cd packages && cabal2nix $($WITH_HPACK && echo '--hpack') ../$CABAL_FILE_DIR > ./${PACKAGE_NAME}.nix && gitignore-src ./${PACKAGE_NAME}.nix)

  PKGS+=("$PACKAGE_NAME")
  echo "    ${PACKAGE_NAME} = import ./packages/${PACKAGE_NAME}.nix;" >> packages.nix
done

echo "}" >> packages.nix

cat > hydra.nix <<EOF
# DO NOT MODIFY ! - this file is generated by generate-packages.sh
let
    nixpkgs = import ./release.nix;

    doHaddock = nixpkgs.haskell.lib.doHaddock;
    doCoverage = nixpkgs.haskell.lib.doCoverage;
    mapAttrs = nixpkgs.lib.mapAttrs;

in mapAttrs (name: value: doHaddock (doCoverage value))
{
    inherit (nixpkgs.haskellPackages)
$(echo "${PKGS[@]}" | fmt -w 80 | sed 's/^/        /');
}
EOF
